#!/bin/bash
#
# Title:         SharkJack Payload Library - Shell (Formerly SharkLib)
# Author:        REDD
# Version:       1.4
#
# This Script is to be ran on the Hak5 SharkJack itself. This Script
# makes switching between local stored payloads quick and simple.
#

VERS=1.4
LIB_DIR="/root/library"
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
START_DIR="$DIR"
INSTALL_DIR="/usr/sbin"
EXEC_FILE="library"
PAYLOAD_DIR="/root/payload"
PAYLOAD_FILE="${PAYLOAD_DIR}/payload.sh"

function install_library() {
    if [[ "$DIR" != ${INSTALL_DIR} ]]; then
	    if [ ! -f "${INSTALL_DIR}/${EXEC_FILE}" ]; then
		    printf " -> Installing ${EXEC_FILE} command into System for Easy Access.\n"
		    sleep 1;
		    cp -rf $0 ${INSTALL_DIR}/${EXEC_FILE}
		    printf " -> Fixing Permissions of ${EXEC_FILE} command in ${INSTALL_DIR}.\n"
		    sleep 1;
		    chmod +x ${INSTALL_DIR}/${EXEC_FILE}
	    fi
    fi
}

function view_payload() {
    printf "\n";
    cat "${PAYLOAD_FILE}";
    printf "\n";
    read -n 1 -s -r -p "Press any key to return to Menu..";
    library_menu;
}

function remove_library() {
	if [ -f "${INSTALL_DIR}/${EXEC_FILE}" ]; then
		printf "\n"
		printf "Removing ${EXEC_FILE} command from local system.\n"
		rm -rf "${INSTALL_DIR}/${EXEC_FILE}";
		printf "${EXEC_FILE} command has been fully removed.\n\n"
	fi
}

function free_space() {
	FREE_MEM="$(df -h ${PWD} | awk '/[0-9]%/{print $(NF-2)}')"
}


function header() {
free_space;
printf "\n"
printf "\
    \_____)\_____      Shark Jack      _____/(_____/
    /--v____ __°<       by Hak5        >°__ ____v--\\
           )/                              \(      
           \n"
printf "         O====================================O  \n"
printf "         |   %-29s    |\n" "${LIBRARY_TITLE}"
printf "         O====================================O\n"
printf "           | Free Space: %-6s   Vers: %-3s | \n" "${FREE_MEM}" "${VERS}"
printf "           O================================O \n"
printf "\n"
printf "\n"
}

function backup_payload() {
	clear;
	LIBRARY_TITLE="        Backup Payloads"
	header;
	if [ -f "${PAYLOAD_FILE}" ]; then
		printf "\n"
		printf "    1. Backup current payload to the Library.\n"
		printf "\n"
		printf "    2. Return to Previous Menu.\n"
		printf "\n"
		printf "   Select a Menu Item by # and press ENTER: "
		read BACKUP_INPUT
		printf "\n"
		if [ "${BACKUP_INPUT}" = "1" ]; then
			printf "   What would you want to call this Payload?: "
			read BACKUP_INPUT_1
			if [[ "${BACKUP_INPUT_1}" != "" ]]; then
				if [ ! -d "${LIB_DIR}/${BACKUP_INPUT_1}" ]; then
					REM_SPACES=$(echo -e "${BACKUP_INPUT_1}" | sed 's/ //g')
					BACKUP_INPUT_1="${REM_SPACES}"
					mkdir -p "${LIB_DIR}/${BACKUP_INPUT_1}"
					cp -rf "${PAYLOAD_FILE}" "${LIB_DIR}/${BACKUP_INPUT_1}/payload.sh"
					printf "   Created Payload directory named ${BACKUP_INPUT_1}\n"
					sleep 2;
					library_menu;
				else
					REM_SPACES=$(echo -e "${BACKUP_INPUT_1}" | sed 's/ //g')
					BACKUP_INPUT_1="${REM_SPACES}"
					printf "   Removing Old Copy and using New Copy of ${BACKUP_INPUT_1}\n"
					rm -rf "${LIB_DIR}/${BACKUP_INPUT_1}"
					mkdir -p "${LIB_DIR}/${BACKUP_INPUT_1}"
					cp -rf "${PAYLOAD_FILE}" "${LIB_DIR}/${BACKUP_INPUT_1}/payload.sh"
					sleep 2;
					library_menu;
				fi
			else
				if [ ! -d "${LIB_DIR}/Unnamed_Payload" ]; then
					printf "   Backing up Payload into Default Payload directory..\n"
					mkdir -p "${LIB_DIR}/Unnamed_Payload"
					cp -rf "${PAYLOAD_FILE}" "${LIB_DIR}/Unnamed_Payload/payload.sh"
					sleep 2;
					library_menu;
				else
          printf "   Removing Old Copy and using New Copy of ${LIB_DIR}/Unnamed_Payload\n"
          rm -rf "${LIB_DIR}/Unnamed_Payload"
          mkdir -p "${LIB_DIR}/Unnamed_Payload"
					cp -rf "${PAYLOAD_FILE}" "${LIB_DIR}/Unnamed_Payload/payload.sh"
					sleep 2;
					library_menu;
				fi
			fi
		elif [ "${BACKUP_INPUT}" = "2" ]; then
			library_menu;
		else
			backup_payload;
		fi
	else
		printf "   No Payload in ${PAYLOAD_DIR}.\n"
	fi
}

function delete_payload() {
	DELETE_INPUT=NULL
	clear;
	LIBRARY_TITLE="        Delete Payloads"
	header;
	cd "${LIB_DIR}"
	DIR_CNT="NULL"
	DIR_CNT=$(ls "${LIB_DIR}" | grep -v total | wc -l)
	declare -a DIRS
	i=1
	for d in */; do
		DIRS[i++]="${d%/}"
	done
	if [ "${DIR_CNT}" -lt "1" ]; then
                printf "   There are no Payloads to Delete. \n\n"
	              printf "   Returning to Previous Menu.\n"
                sleep 2;
                library_menu;
	fi
	printf "   There are ${#DIRS[@]} Payloads in the Library:\n"
	for((i=1;i<=${#DIRS[@]};i++)); do
		printf "    %2d. %-20s\n" "$i" "${DIRS[i]}"
	done
  PAYLOAD_TOTAL=${#DIRS[@]}
  PLUS_QUIT=$((PAYLOAD_TOTAL+1))
	printf "\n"
	printf "    %2d. %-20s\n" "$PLUS_QUIT" "Return to Previous Menu."
	printf "\n"
	printf "   Please choose a Payload by Number: "
	read DELETE_INPUT
	printf "\n"
	if [[ "${DELETE_INPUT}" == "${PLUS_QUIT}" ]]; then
		printf "   Returning to Previous Menu.\n"
		sleep 2;
		library_menu;
        elif [[ "${DELETE_INPUT}" == "" ]]; then
                printf "   Please Input a choice.\n"
			        	sleep 2;
                delete_payload;
	    	elif ! [[ "${DELETE_INPUT}" =~ ^[0-9]+$ ]]; then
                printf "   Please Input a choice.\n"
                sleep 2;
                delete_payload;
        elif [[ "${DELETE_INPUT}" == "0" ]]; then
                printf "   Please Input a choice.\n"
                sleep 2;
                delete_payload;
        elif [[ "${DELETE_INPUT}" -gt "${PLUS_QUIT}" ]]; then
		printf "   Please Input a choice.\n"
		sleep 2;
		delete_payload;
	elif [[ "${DELETE_INPUT}" -le "${PLUS_QUIT}" ]]; then
		printf "   Deleting payload ${DIRS[$DELETE_INPUT]} from SharkJack. \n"
		rm -rf "${LIB_DIR}/${DIRS[$DELETE_INPUT]}"
		cd "${START_DIR}"
		sleep 2;
		library_menu;
	else
		printf "   Wrong Choice, going back to Previous Menu.\n"
		cd "${START_DIR}"
		sleep 2;
		library_menu;
	fi
}


function restore_payload() {
	LOAD_INPUT=NULL
	clear;
	LIBRARY_TITLE="        Restore Payloads"
	header;
	cd "${LIB_DIR}"
        DIR_CNT=$(ls "${LIB_DIR}" | grep -v total | wc -l)
	declare -a DIRS
	i=1
	for d in */; do
		DIRS[i++]="${d%/}"
	done
  if [ "${DIR_CNT}" -lt "1" ]; then
    printf "   There are no Payloads to Restore. \n\n"
		printf "   Returning to Previous Menu.\n"
		sleep 2;
		library_menu;
  fi
	printf "   There are ${#DIRS[@]} Payloads in the Library:\n"
	for((i=1;i<=${#DIRS[@]};i++)); do
		printf "    %2d. %-20s\n" "$i" "${DIRS[i]}"
	done
  PAYLOAD_TOTAL=${#DIRS[@]}
  PLUS_QUIT=$((PAYLOAD_TOTAL+1))
	printf "\n"
	printf "    %2d. %-20s\n" "$PLUS_QUIT" "Return to Previous Menu."
	printf "\n"
	printf "   Please choose a Payload by Number: "
	read LOAD_INPUT
	printf "\n"
	if [[ "${LOAD_INPUT}" == "${PLUS_QUIT}" ]]; then
		printf "   Returning to Previous Menu.\n"
		sleep 2;
		library_menu;
        elif [[ "${LOAD_INPUT}" == "" ]]; then
                printf "   Please Input a choice.\n"
		sleep 2;
                restore_payload;
		elif ! [[ "${LOAD_INPUT}" =~ ^[0-9]+$ ]]; then
                printf "   Please Input a choice.\n"
                sleep 2;
                restore_payload;
        elif [[ "${LOAD_INPUT}" == "0" ]]; then
                printf "   Please Input a choice.\n"
                sleep 2;
                restore_payload;
        elif [[ "${LOAD_INPUT}" -gt "${PLUS_QUIT}" ]]; then
                printf "   Please Input a choice.\n"
                sleep 2;
                restore_payload;
	elif [[ "${LOAD_INPUT}" -le "${PLUS_QUIT}" ]]; then
		printf "   Loading payload ${DIRS[$LOAD_INPUT]} to SharkJack. \n"
		cp -rf "${LIB_DIR}/${DIRS[$LOAD_INPUT]}/payload.sh" "${PAYLOAD_FILE}"
		cd "${START_DIR}"
		sleep 2;
		library_menu;
	else
		printf "   Wrong Choice, going back to Previous Menu.\n"
		cd "${START_DIR}"
		sleep 2;
		library_menu;
	fi
}
function cleanup_ctrl {
	echo -en "\n -> Caught SIGINT! \n"
	printf " -> Cleaning up and Exiting..\n\n"
	sync
	sleep 1;
	exit $?
}
function exit_library() {
	printf " -> Cleaning up and Exiting..\n\n"
	sync
	sleep 1;
	exit 0;
}

function library_menu() {
	clear;
	trap cleanup_ctrl SIGINT
	trap cleanup_ctrl SIGTERM
	MENU_INPUT=NULL
	if [ ! -d "${LIB_DIR}" ]; then
		printf " -> Creating Payload Library directory.\n"
		mkdir -p "${LIB_DIR}"
	fi
	cd "$LIB_DIR"
	LIBRARY_TITLE="      Payload Library Menu"
	header;
  printf "    1. Backup Payload to the Library.\n"
	printf "    2. Restore Payload from the Library.\n"
	printf "    3. Delete Payload from the Library.\n"
	printf "\n"
	printf "    4. View Current Payload on SharkJack\n"
	printf "\n"
	printf "    0. Exit\n"
	printf "\n"
	printf "   Select a Menu Item by # and press ENTER: "
	read MENU_INPUT
	printf "\n"
    if ! [[ "${MENU_INPUT}" =~ ^[0-9]+$ ]]; then
            library_menu;
    elif [[ "${MENU_INPUT}" = "0" ]]; then
            exit_library;
		elif [[ "${MENU_INPUT}" = "1" ]]; then
            backup_payload;
		elif [[ "${MENU_INPUT}" = "2" ]]; then
            restore_payload;
    elif [[ "${MENU_INPUT}" = "3" ]]; then
            delete_payload;
    elif [[ "${MENU_INPUT}" = "4" ]]; then
            view_payload;
		elif [[ "${MENU_INPUT}" -ge "5" ]]; then
			library_menu;
		elif [[ "${MENU_INPUT}" == "" ]]; then
			library_menu;
		else
			library_menu;
	fi
}
if [ "$1" == "--install-library" ]; then
	install_library;
elif [ "$1" == "--remove-library" ]; then
	remove_library;
else
	library_menu;
fi
